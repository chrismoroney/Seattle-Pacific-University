/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('seattle-pacific-university-csc-4151-4152:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const io = require("socket.io")(server, {
  cors: {
    origin: "http://localhost:3000/",
    methods: ["GET", "POST"]
  }
});

io.on('connection', (socket) => {
  console.log('a user connected');
  socket.on('disconnect', () => {
    console.log('user disconnected');
  });
  socket.on('post', postContent => {
    io.emit('post', postContent);
  });

  socket.on("typing", data => {
    socket.broadcast.emit("notifyTyping", {
      username: data.username,
      message: data.message
    });
  });

  socket.on("stopTyping", () => {
    socket.broadcast.emit("notifyStopTyping");
  });

  socket.on("chat message", function(data) {
    console.log("message: " + /* msg */ data.msg);
    socket.broadcast.emit("received", { message: data.msg, username: data.username });
  });

  socket.on("direct message", function(data){
      socket.broadcast.emit("direct message sent", {Sender: data.Sender, Message: data.Message, ChatID: data.ChatID});
      console.log("direct message sent to server");
  });

  socket.on('join-room', (roomId, userId) => {
    //test start
    console.log(roomId, userId + "!!!!!");
    //test end

    socket.join(roomId)
    socket.broadcast.to(roomId).emit('user-connected', userId)

    //test start
    console.log("sent!");
    //test end

    socket.on('here-is-my-username', theirusername =>{
      socket.to(roomId).broadcast.emit('here-is-their-username', theirusername)
    })

    socket.on('disconnect', () => {
      socket.to(roomId).broadcast.emit('user-disconnected', userId)
    })
  })

  socket.on("send-call-invite", (data) => {
    socket.broadcast.emit("call-invite", {invitee: data.invitee, inviter: data.inviter, roomId: data.roomId});
    console.log(data.invitee, data.inviter, data.roomId);
  })

});
